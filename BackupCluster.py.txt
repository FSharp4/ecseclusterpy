import math
from numbers import Number
from typing import Union, List

import numpy

class Datapoint:
    data: numpy.ndarray

    def __init__(self, point: any):
        self.data = numpy.asarray(point)

class Cluster:
    points: numpy.ndarray
    mean: numpy.ndarray

    def __init__(self, points: any):
        if isinstance(points, numpy.ndarray):
            self.points = points
        else:
            self.points = numpy.asarray(points)

        tmp = self.points[0]
        ndim = 1
        if isinstance(tmp, numpy.ndarray):
            ndim = tmp.__len__()


        self.mean = numpy.array({})
        for dim in range(ndim):
            dimensional_value_sum = 0
            for point in self.points:
                dimensional_value_sum = dimensional_value_sum + point[dim]

            numpy.append(self.mean, dimensional_value_sum / self.points.__len__())

    def distanceTo(self, position: Union[numpy.ndarray, Number]) -> float:
        distance: float = 0
        if isinstance(position, numpy.ndarray) and isinstance(self.mean, numpy.ndarray):
            for i in range(position.__len__()):
                distance = distance + (position[i] - self.mean[i]) ** 2

            distance = math.sqrt(distance)
        elif isinstance(position, Number) and isinstance(self.mean, Number): #single dimension case
            distance = math.fabs(position - self.mean)

        return distance

def merge(c1, c2) -> Cluster:
    points = c1.points
    for point in c2.points:
        numpy.append(points, point)

    return Cluster(points)